-- Practica 4 --
-- Ejercicio 1 --
Interfaz
Modulo Multiconjunto
Parametros Formales
    generos α

Se explica con TAD Multiconjunto
Generos multiconj

Operaciones
    Count(in elem: α, in mc: multiconj) → res: nat
        Pre: { true }
        Post: { res =obs #(elem, mc) }
        Complejidad: O(n)

    Vacio() → res: multiconj
        Pre: { true }
        Post: { (∀ e: α)(#(e, res) = 0) }
        Complejidad: O(1)
        Aliasing: Devuelve un multiconj por referencia

    Agregar(in elem: α, inout mc: multiconj)
        Pre: { mc = mc0 ∧ true }
        Post: { #(elem, mc) = #(elem, mc0) + 1 }
        Complejidad: O(1)
    
    Borrar(in elem: α, inout mc: multiconj)
        Pre: { mc = mc0 ∧ true }
        Post: { (#(elem, mc0) ≥ 1 ∧ #(elem, mc) = #(elem, mc0) - 1)
                ∨ (#(elem, mc0) = 0 ∧ #(elem, mc0) = #(elem, mc) }
        Complejidad: O(n)
    
    ...
    faltan Operaciones
Representacion
    Multiconjunto(α) se representa con estr
        donde estr es lista(α)

    Rep: estr e → bool
    Rep(e) ≡ true
    
    Abs: estr e → multiconj
    Abs(e) ≡ if e = Vacia() then ∅ else Ag(Primero(e), Abs(Fin(e)))

-- Ejercicio 2 --
Lista enlazada no ordenada
iInterseccion(in a: conj, in b: conj) → res: conj {
    i ← 0
    res ← vacia()
    while i < longitud(a) {
        while j < longitud(b) {
            if a[i] = b[j] {
                agregarAdelante(res,a[i])
            }
            j++
        }
        i++
    }
    devolver res
}

Lista enlazada ordenada
iInterseccion(in a: conj, in b: conj) → res: conj {
    i ← 0
    res ← vacia()
    while i < longitud(a) {
        while j < longitud(b) {
            if a[i] = b[j] {
                agregarAdelante(res,a[i])
            }
            j++
        }
        i++
    }
    devolver res
}

-- Seguir dsp el 2

-- Ejercicio 3 --
Lista enlazada
Insertar O(1)
Borrar O(n)
Busqueda minimo O(n) 
Borrado del minimo O(n)

Lista enlazada ordenada
Insertar O(log n)
Borrar O(log n)
Busqueda minimo O(log n) 
Borrado del minimo O(log n)

ABB
Insertar O(n) y caso promedio O(log n)
Borrar O(n) 
Busqueda minimo O(log n) 
Borrado del minimo O(log n)

AVL
Insertar O(log n)
Borrar O(log n)
Busqueda minimo O(log n) 
Borrado del minimo O(log n)

faltan tries y heaps

-- Ejercicio 4 --
Decidimos que podíamos usar una hash table para la matriz infinita con tuplas que almacenen las direcciones

-- Ejercicio 5 --
matriz finita ya lo hicimos

-- Ejericio 6 --
Interfaz
Modulo Diccionario con historia
Parametros Formales
    generos k, σ

Se explica con TAD Diccionario con historia
Generos diccHist

-- malardo ejercicio, creo que teniendo de estr un diccionario con significado una tupla(σ, nat) es trivial, me piden todo en O(n) 
-- pato entendio que cuando borras deberias poder obtener el anterior, podemos hacer un dicc con sign pila, solo me interesa el Primero
Operaciones
    Definido?(in clave: k, in dc: diccHist) → res: bool
        Pre: { true }
        Post: { res =obs Definido?(k, diccHist) }
        Complejidad: O(n)

    CantSignificado(in clave: k, in dc: diccHist) → res: nat
        Pre: { Definido?(clave, dc) }
        Post: { res =obs CantSignificado(clave, dc) }
        Complejidad: O(n)
    
    ...

Representacion
    Diccionario con historia(α) se representa con estr
        donde estr es dicc(k, pila(σ))

    Rep: estr e → bool
    Rep(e) ≡ true
    
    Abs: estr e → diccHist
    Abs(e) ≡ dc |   (∀ clave: k)(Definido(k, dc) ↔ tamaño(obtener(k,e)) ≠ 0 ∧
                    significado(k, dh) = tope(obtener(k, e)) ∧
                    BorrarSignificado(k, dh) = desapilar(obtener(k, e)) ∧

Algoritmos
...pendientes

-- Ejercicio 8 --

    
Ejercicio 11
    
un vector que cada posicion tenga la cantidad ACUMULADA de personas, entonces hago Hasta - Desde Y PAM SUMA DE RIEMANN

IAB se representa con vector(nat)

    Rep: estr e → bool
    Rep(e) ≡ true <-> (pa todo i, j: nat)(0<= i < j <= long(e) =>l i-esimo(e, i) <= i-esimo(e, j))

    Abs: estr e → IAB
    Abs(<>) ≡ Comenzar
    Abs(s◦n) ≡ TerminaDia(Abs(s), n)
    
1-  cantPersonas(iab, desde, hasta) -> res: nat { //ponele que se cumple la pre
       res = iab[hasta] - iab[desde]   
    }
2- O(n) maestro
3- pillo lince

4- a ver tranquilamente podria iterar sobre posibles d's y quedarme con el mayor (creo?) pero dudo que sea esa la idea

Ejercicio 12

opcion 1 - un vector de punteros a palabras Y un diccionario (de hash) de palabras a conjunto de posiciones y de yapa un conjunto con las palabras mas repetidas (se va calculando a medida que se insertan y cambian palabras)

EL CONJUNTO CON LAS MAS REPETIDAS ESTA IMPLEMENTADO CON HASHÍS


no se me ocurre una mejor alternativa
Texto se representa con estr
donde estr es tupla(posiciones: vector(puntero(palabra)), palabras: dicc(palabra, conj(nat)), masRep: conj(punteros(palabras)), maxRep: nat)


cambiarPalabra(texto, palabra* vieja, nueva){ //kiherbgaierbytg con los punteros
    conj = palabras.obtener(vieja) //O(1)
    ItConj = CrearIt(conj) //O(1)
    vieja = nueva //por copia, ahora el puntero apunta a la nueva O(1)
    existeNueva = palabras.definido(nueva) //O(1)


    if(existeNueva){ //tengo que insertar todas las posiciones del
        //tengo que agregar todos los elementos del conjunto viejo al conjunto nuevo //O(k)
        //tengo que borrar la definicion vieja en el diccionario //O(1)
        // si el conjunto nuevo tiene la misma mcantidad de elementos que maxRep agrego la palabra //O(1)
        // si el cardinal nuevo es mayor a max rep this.maxRep = new Conj(nuevo) //O(1) con ricos memory leaks
    } else {
        //crear una nueva entrada en el dicc //O(1)
        //tengo que agregar todos los elementos del conjunto viejo al conjunto nuevo //O(k)
        //tengo que borrar la definicion vieja en el diccionario //O(1)
    } JAJ
}


Ejercicio 14
trank, somos capos, es ez

hay que usar un vector ordenado , y para el c, idem que acumule la plata
