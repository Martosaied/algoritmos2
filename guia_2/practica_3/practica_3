-- Practica 3 --
-- Ejercicio 1 --

Rep: estr → bool
(∀ e :estr) Rep ≡ (∀ i: nat)(0 <= i < e.inicio → e.elem[i] = 0)
// No se entiende nada la consigna


-- Ejercicio 4 --
Rep: estr → bool
(∀ e: estr) Rep ≡   //Esta bien esto? Rep(e.izq) ∧ Rep(e.der) ∧
                    e.altura = max { e.izq->altura, e.der->altura } + 1 ∧
                    e.altura

-- Ejercicio 5 --
(1) entraron es la union de todos los conjuntos
(2) Para toda persona en colados, tambien debe estar en la fila
(3) Para toda personas en atendidos, no debe estar en colados ni en fila

-- Asumo axiomatizado ∈ para colas

Rep: estr → bool
(∀ e: estr) Rep ≡   (1)(∀ p: persona)(p ∈ e.fila ∨ p ∈ e.colados ∨ p ∈ e.atendidos → p ∈ e.entraron) ∧
                    (2)(∀ p: persona)(p ∈ e.colados → p ∈ e.fila) ∧
                    (3)(∀ p: persona)(p ∈ e.atendidos → p ∉ e.fila ∧ p ∉ e.colados)

Abs: estr e → fila { Rep(e) }
Abs(e) ≡ f /    (∀ p: persona)(p ∈ e.colados → SeColo?(p, f) = true) ∧
                (∀ p: persona)(p ∈ e.fila → Esperando(p, f) = true) ∧
                (∀ p: persona)(p ∈ e.fila → Posicion(p, f) = Posicion(p, c)) ∧
                (∀ p: persona)(p ∈ e.entraron → Entro?(p, f) = true) ∧
                (∀ p: persona)(p ∈ e.atendidos → FueAtendido?(p, f) = true) ∧

Posicion: α a × cola(α) c → nat  { a ∈ c }
Posicion(a, c) ≡ tamaño(c) - if (proximo(c) = a) then 0 else 1 + Posicion(a, desencolar(c))

-- Ejercicio 6 --

(1) Todos los presentes deben estar en invitados
(2) Todos los significados del dicc gruposDe deben estar en presentes
(3) La interseccion para cualquier par de grupo es vacia
(4) Para cualquier grupo debe tener un regalo
(5) El regalo no se puede repetir
(6) El grupo mas numeroso debe estar en las claves de gruposDe
(7) El grupo mas numeroso debe ser efectivamente el grupo mas numeroso y si no es el ultimo debe ser el identificador mas pequeño

Rep: estr → bool
(∀ e: estr) Rep ≡   (1) (∀ p: persona)(esta?(e.presentes, p) →ₗ p ∈ e.invitados) ∧
                    (2) (∀ g: grupo)((∀ p: persona)(p ∈ obtener(e.gruposDe, grupo) →ₗ esta?(e.presentes, p))) ∧
                    (3) (∀ g1, g2: grupo)(g1 ∈ claves(e.gruposDe) ∧ g2 ∈ claves(e.gruposDe) ∧ g1 ≠ g2 →ₗ g1 ∩ g2 = ∅) ∧     
                    (4) (∀ g: grupo)(g ∈ claves(e.gruposDe) →ₗ g ∈ claves(e.regaloDeGrupo))
                    (5) (∀ g1, g2: grupo)(g1 ∈ claves(e.regaloDeGrupo) ∧ g2 ∈ claves(e.regaloDeGrupo) ∧ g1 ≠ g2 →ₗ 
                                                                                obtener(e.regaloDeGrupo, g1) ≠ obtener(e.regaloDeGrupo, g2))
                    (6) e.grupoMasNumeroso ∈ claves(e.gruposDe) ∧ (∀ g: grupo)(g ∈ e.gruposDe →ₗ 
                                    (#obtener(g, gruposDe) < #obtener(e.grupoMasNumeroso, gruposDe) ∨ 
                                    (#obtener(g, gruposDe) = #obtener(e.grupoMasNumeroso, gruposDe) ∧ e.grupoMasNumeroso < g)        

Abs: estr e → altafiesta { Rep(e) }
Abs(e) ≡ af / invitadosPendientes(af) = e.invitados - e.presentes(en la resolucion no esta asi, igualmente no sabria como realizar tal resta pq presentes es una cola)
              regalos(af) = //buen sabemos hacer esto


(Falta implementacion de llegaGrupo)

-- Ejercicio 7 --
Definimos una otra operacion que me devuelve la cantidad de horas de un proyecto en un mes determinado

sumaDeHorasxMes: dicc<actividad, <proyecto, mes, horas>> × proyecto × horas → nat
axtiomatizacion pendiente


(1) (∀ p: proyecto)((∃ a: actividad)(a ∈ claves(e.detalle) ∧ obtener(a, e.detalles).proy = p) →ₗ 
                                    (∀ m: mes) obtener(p, e.horasPorMes)[mes] = sumaDeHorasxMes(e.detalle, p, mes)
(2) ()

No entiendo nada de este Ejercicio kfjaskjdhfakjshdf

-- Ejercicio 8 --
(1) catPrioritarias debe perteneces a las claves de tramitesXCat
(2) todas las categorias de los tramites deben pertenecer a las claves de tramitesXCat
(3) todo tramite debe estar en exactamente un conjunto de tramitesXCat
(4) Ningun pendPrioritario debe estar en invitadosPendientes
(5) Todos los pendientes y pendPrioritario deben estar en las claves de tramites

Rep: estr → bool
Rep(e) ≡    (1) e.catPrioritarias ∈ claves(e.tramitesXCat)
            (2) (∀ id: id)(id ∈ claves(e.tramites) → obtener(id, e.tramites) ∈ claves(e.tramitesXCat))
            que paja me da esto mama

Abs: estr e → oficina  { Rep(e) }
Abs(e) ≡ o \ prioritarias(o) =  c.catPrioritarias ∧ pendientes(o) = e.pendientes ∧ e.pendPrioritarios = pendPrioritarios(o) ∧
                                (∀ id: id)(id ∈ claves(e.tramites) → obtener(id, e.tramites) = catTram(id, o)) ∧
                probablemente falta algo con la otra operacion pendPrioritarios 


-- Ejercicio 9 --
(1) Todas las alarmas dentro del diccionario de alarmas deben estar encendidas, es decir, debe tener en su conjunto asociado
    un sensor donde su umbral sea menor a su medicion
(2) Para todo conjunto de sensores, cada sensor debe tener la alarma dentro de su conjunto y viceversa 


Rep: estr → bool
Rep(e) ≡    (1) (∀ a: alarma)(def?(a, e.alarmas) → (∃ s: sensor)(s ∈ obtener(a, e.alarmas) ∧ obtener(s, e.sensores).umbral < obtener(s, e.sensores).medicion)
            (2) (∀ s: sensor, a: alarma)(def?(a, e.alarmas) ∧ₗ def?(s, e.sensores) →ₗ s ∈ obtener(a, a.alarmas) ⇔ a ∈ obtener(s, e.sensores))

Abs: estr e → planta { Rep(e) }
Abs(e) ≡ pl /   (∀ a: alarma)(def?(a, e.alarmas) → esAlarma(pl, a) = true) ∧
                (∀ s: sensor)(def?(s, e.sensores) → esSensor(pl, s) = true) ∧
                (∀ a: alarma)(def?(a, e.alarmas) → obtener(a, e.alarmas) = sensoresAlarma(pl, a))
                blabla para sensores tema umbral y medicion