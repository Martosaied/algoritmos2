Parte 1

#Ejercicio 6b
cantHojas: rosetree(α) → nat
cantHojas(rt) ≡ if hijos(rt) = 0 then 1 else sumarHojas(hijos(rt))

esHoja: rosetree(α) → bool
esHoja(rt) ≡ vacia?(hijos(rt))

sumarHojas: sec(rosetree(α)) → nat
sumarHojas(e • s) ≡ if vacía?(s) then 0 else cantHojas(prim(s)) + sumarHojas(fin(s)) fi


#Ejercicio 6c
podar: rosetree(α) → rosetree(α)
podar(r)               ≡ rose(raíz(r), podadora(hijos(r)))
podar(rose(a, rs • s)) ≡ if (vacio?(hijos(rs))) then a else podar(rs)

podadora: secu(rosetree(α)) → secu(rosetree(α))
podadora(<>)       ≡ <>
podadora(rs • srs) ≡ if(esHoja(rs)) then podadora(srs) else podar(rs) • podadora(srs)

#Ejercicio 6d
ramas_menor_k: rosetree(α) × nat → sec(sec(α))
ramas_menor_k(rt, n) ≡ filtrar_n(obtener_ramas(rt), n)

obtener_ramas: rosetree(α) → sec(sec(α))
obtener_ramas(<>) ≡ <>
obtener_ramas(rose(a, s)) ≡ obtener_ramas(hijos(prim(s))) • obtener_ramas(fin(s)) //NO; PENSAR

#Ejercicio 6e
#Ejercicio 6f


#Ejercicio 2.3.1 Modelado
acciones a registrar
    apertura de la ventanilla
    llegada de un nuevo cliente a la fila
    atencion del cliente que estuviera en primer lugar (con su consecuente egreso de la fila).


TAD Fila
    igualdad observacional
        (∀ f,f' : fila)(f = f' ↔ (∀ p: persona)(Esperando(p, f) = Esperando(p, f') ∧ Posicion(p,f) = Posicion(p,f')))

    generos fila

    generadores
        AbrirVentanilla  : → fila
        Llegar           : persona p × fila f → fila   {¬Esperando(p, f)}
        //deberia para la parte 2 agregar ColarseAdelanteDe como generador?
        ColarseAdelanteDe : persona p × persona q × fila f → fila {¬Esperando(p, f) ∧ Esperando(q, f)}
        //para la parte 3 agrego Retirarse como generador
        Retirarse        : persona p × fila f → fila {Esperando(p, f)}


    observadores basicos
        Esperando        : persona × fila → bool
        Posicion         : persona p × fila f → nat    {Esperando(p, f)}


    otras operaciones
        Vacia            : fila → bool
        Atender          : fila f → fila  {¬Vacia(f)}
        Longitud         : fila → nat

        //parte 2
        Retirarse        : persona p × fila f → fila {Esperando(p, f)}
        ColarseAdelanteDe : persona p × persona q × fila f → fila {¬Esperando(p, f) ∧ Esperando(q, f)}
        SeColo?          : persona p × fila f → bool {Esperando(p, f)}

        //parte 3
        Entro? : persona × fila → bool
        FueAtendido? : persona × fila → bool

    axiomas
        Vacia(AbrirVentanilla()) ≡ true
        Vacia(Llegar(p,f)) ≡ false
        Esperando(q, AbrirVentanilla()) ≡ false
        Esperando(q, Llegar(p,f)) ≡ if q = p 
                                        then true 
                                        else if Vacia(f)
                                            then false
                                            else Esperando(q, f)
                                        fi
                                    fi 
        Posicion(q, Llegar(p,f)) ≡ if p = q then Longitud(f) + 1 else Posicion(q, f)
        Atender(Llegar(p,f)) ≡ f
        Longitud(Llegar(p,f)) ≡ if (Vacia(f)) then 0 else 1 + Longitud(f)

        //parte 2
        Retirarse(q, Llegar(p ,f)) ≡ if (q = p) then f else Llegar(p, Retirarse(f))
        ColarseAdelanteDe(p, q, Llegar(t, f)) ≡ if (q = t) then Llegar(p, Llegar(t, f)) else ColarseAdelanteDe(p, q, f)
        SeColo?(p, ColarseAdelanteDe(p, q, llegar(q, f))) ≡ true

        //parte 3
        Entro?(p, Llegar(q, f)) ≡ Esperando(p, f) ∨ FueAtendido(p ,f) ∨ (¬Esperando(p, f) ∧ ¬FueAtendido(p ,f)) 
        FueAtendido?(p, AbrirVentanilla()) ≡ false
        FueAtendido?(q, f) ≡ if Esperando(p, Llegar(p,f)) 
                                            then false 
                                            else Entro?(p, )

        //De esta forma no puedo asegurar que realmente estuvo en la fila
Fin TAD

#Ejercicio 2.3.2
comportamientos aut:
    - envio de tecnico si esta disponible
    - 
TAD Tecnico ES String

TAD Tecnicos a Domicilio
    genero tecadom

    usa direccion, tecnico

    igualdad observacional

    generadores
        crearTAD: → tecadom
        añadirPedido: direccion × tecadom → tecadom  {restricciones?}
        terminarPedido: direccion × tecadom → tecadom  {restricciones?}
        tecnicoDisp: tecnico × tecadom → tecadom

    observadores
        tecnicosDisp: tecadom → conj(tecnico)
        tecnicosOcup: tecadom → conj(tecnico)
        tecnicosEnCentral: tecadom → conj(tecnico)
        pedidosPDA: tecadom → conj(direccion)
        pedidosAtendidos: tecadom → conj(direccion)
        masVisitas: direccion × tecadom → conj(tecnico)


Fin TAD